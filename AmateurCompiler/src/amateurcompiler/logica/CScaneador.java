/* The following code was generated by JFlex 1.6.1 */

 /*Seccion de codigo de usuario*/
package amateurcompiler.logica;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
/* Seccion de opciones y declaraciones de JFlex */
/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>Lexico.flex</tt>
 */
public class CScaneador {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\51\1\52\2\0\1\52\22\0\1\51\1\0\1\50\2\0"
            + "\1\35\2\0\1\37\1\40\1\33\1\31\1\43\1\32\1\47\1\34"
            + "\12\46\1\36\1\0\1\26\1\27\1\25\2\0\32\44\1\41\1\0"
            + "\1\42\1\0\1\45\1\0\1\5\1\11\1\16\1\17\1\13\1\20"
            + "\1\4\1\23\1\10\2\44\1\12\1\6\1\14\1\3\1\1\1\24"
            + "\1\2\1\21\1\15\1\22\1\7\2\44\1\30\1\44\57\0\1\45"
            + "\12\0\1\45\4\0\1\45\5\0\27\45\1\0\37\45\1\0\u01ca\45"
            + "\4\0\14\45\16\0\5\45\7\0\1\45\1\0\1\45\21\0\165\45"
            + "\1\0\2\45\2\0\4\45\1\0\1\45\6\0\1\45\1\0\3\45"
            + "\1\0\1\45\1\0\24\45\1\0\123\45\1\0\213\45\1\0\255\45"
            + "\1\0\46\45\2\0\1\45\7\0\47\45\11\0\55\45\1\0\1\45"
            + "\1\0\2\45\1\0\2\45\1\0\1\45\10\0\33\45\5\0\3\45"
            + "\35\0\13\45\5\0\112\45\4\0\146\45\1\0\10\45\2\0\12\45"
            + "\1\0\23\45\2\0\1\45\20\0\73\45\2\0\145\45\16\0\66\45"
            + "\4\0\1\45\5\0\56\45\22\0\34\45\104\0\23\45\61\0\200\45"
            + "\2\0\12\45\1\0\23\45\1\0\10\45\2\0\2\45\2\0\26\45"
            + "\1\0\7\45\1\0\1\45\3\0\4\45\2\0\11\45\2\0\2\45"
            + "\2\0\4\45\10\0\1\45\4\0\2\45\1\0\5\45\2\0\14\45"
            + "\17\0\3\45\1\0\6\45\4\0\2\45\2\0\26\45\1\0\7\45"
            + "\1\0\2\45\1\0\2\45\1\0\2\45\2\0\1\45\1\0\5\45"
            + "\4\0\2\45\2\0\3\45\3\0\1\45\7\0\4\45\1\0\1\45"
            + "\7\0\20\45\13\0\3\45\1\0\11\45\1\0\3\45\1\0\26\45"
            + "\1\0\7\45\1\0\2\45\1\0\5\45\2\0\12\45\1\0\3\45"
            + "\1\0\3\45\2\0\1\45\17\0\4\45\2\0\12\45\21\0\3\45"
            + "\1\0\10\45\2\0\2\45\2\0\26\45\1\0\7\45\1\0\2\45"
            + "\1\0\5\45\2\0\11\45\2\0\2\45\2\0\3\45\10\0\2\45"
            + "\4\0\2\45\1\0\5\45\2\0\12\45\1\0\1\45\20\0\2\45"
            + "\1\0\6\45\3\0\3\45\1\0\4\45\3\0\2\45\1\0\1\45"
            + "\1\0\2\45\3\0\2\45\3\0\3\45\3\0\14\45\4\0\5\45"
            + "\3\0\3\45\1\0\4\45\2\0\1\45\6\0\1\45\16\0\12\45"
            + "\20\0\4\45\1\0\10\45\1\0\3\45\1\0\27\45\1\0\20\45"
            + "\3\0\10\45\1\0\3\45\1\0\4\45\7\0\2\45\1\0\2\45"
            + "\6\0\4\45\2\0\12\45\21\0\3\45\1\0\10\45\1\0\3\45"
            + "\1\0\27\45\1\0\12\45\1\0\5\45\2\0\11\45\1\0\3\45"
            + "\1\0\4\45\7\0\2\45\7\0\1\45\1\0\4\45\2\0\12\45"
            + "\1\0\2\45\16\0\3\45\1\0\10\45\1\0\3\45\1\0\51\45"
            + "\2\0\10\45\1\0\3\45\1\0\5\45\10\0\1\45\10\0\4\45"
            + "\2\0\12\45\12\0\6\45\2\0\2\45\1\0\22\45\3\0\30\45"
            + "\1\0\11\45\1\0\1\45\2\0\7\45\3\0\1\45\4\0\6\45"
            + "\1\0\1\45\1\0\10\45\6\0\12\45\2\0\2\45\15\0\72\45"
            + "\5\0\17\45\1\0\12\45\47\0\2\45\1\0\1\45\2\0\2\45"
            + "\1\0\1\45\2\0\1\45\6\0\4\45\1\0\7\45\1\0\3\45"
            + "\1\0\1\45\1\0\1\45\2\0\2\45\1\0\15\45\1\0\3\45"
            + "\2\0\5\45\1\0\1\45\1\0\6\45\2\0\12\45\2\0\4\45"
            + "\40\0\1\45\27\0\2\45\6\0\12\45\13\0\1\45\1\0\1\45"
            + "\1\0\1\45\4\0\12\45\1\0\44\45\4\0\24\45\1\0\22\45"
            + "\1\0\44\45\11\0\1\45\71\0\112\45\6\0\116\45\2\0\46\45"
            + "\1\0\1\45\5\0\1\45\2\0\53\45\1\0\u014d\45\1\0\4\45"
            + "\2\0\7\45\1\0\1\45\1\0\4\45\2\0\51\45\1\0\4\45"
            + "\2\0\41\45\1\0\4\45\2\0\7\45\1\0\1\45\1\0\4\45"
            + "\2\0\17\45\1\0\71\45\1\0\4\45\2\0\103\45\2\0\3\45"
            + "\40\0\20\45\20\0\125\45\14\0\u026c\45\2\0\21\45\1\0\32\45"
            + "\5\0\113\45\3\0\13\45\7\0\15\45\1\0\7\45\13\0\25\45"
            + "\13\0\24\45\14\0\15\45\1\0\3\45\1\0\2\45\14\0\124\45"
            + "\3\0\1\45\4\0\2\45\2\0\12\45\41\0\3\45\2\0\12\45"
            + "\6\0\130\45\10\0\53\45\5\0\106\45\12\0\37\45\1\0\14\45"
            + "\4\0\14\45\12\0\50\45\2\0\5\45\13\0\54\45\4\0\32\45"
            + "\6\0\12\45\46\0\34\45\4\0\77\45\1\0\35\45\2\0\13\45"
            + "\6\0\12\45\15\0\1\45\10\0\17\45\101\0\114\45\4\0\12\45"
            + "\21\0\11\45\14\0\164\45\14\0\70\45\10\0\12\45\3\0\61\45"
            + "\122\0\3\45\1\0\43\45\1\0\2\45\6\0\366\45\6\0\u011a\45"
            + "\2\0\6\45\2\0\46\45\2\0\6\45\2\0\10\45\1\0\1\45"
            + "\1\0\1\45\1\0\1\45\1\0\37\45\2\0\65\45\1\0\7\45"
            + "\1\0\1\45\3\0\3\45\1\0\7\45\3\0\4\45\2\0\6\45"
            + "\4\0\15\45\5\0\3\45\1\0\7\45\102\0\2\45\23\0\1\45"
            + "\34\0\1\45\15\0\1\45\20\0\15\45\63\0\41\45\21\0\1\45"
            + "\4\0\1\45\2\0\12\45\1\0\1\45\3\0\5\45\6\0\1\45"
            + "\1\0\1\45\1\0\1\45\1\0\4\45\1\0\13\45\2\0\4\45"
            + "\5\0\5\45\4\0\1\45\21\0\51\45\u032d\0\64\45\u0716\0\57\45"
            + "\1\0\57\45\1\0\205\45\6\0\11\45\14\0\46\45\1\0\1\45"
            + "\5\0\1\45\2\0\70\45\7\0\1\45\17\0\30\45\11\0\7\45"
            + "\1\0\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0\7\45"
            + "\1\0\7\45\1\0\7\45\1\0\40\45\57\0\1\45\u01d5\0\3\45"
            + "\31\0\17\45\1\0\5\45\2\0\5\45\4\0\126\45\2\0\2\45"
            + "\2\0\3\45\1\0\132\45\1\0\4\45\5\0\51\45\3\0\136\45"
            + "\21\0\33\45\65\0\20\45\u0200\0\u19b6\45\112\0\u51cd\45\63\0\u048d\45"
            + "\103\0\56\45\2\0\u010d\45\3\0\34\45\24\0\63\45\1\0\12\45"
            + "\1\0\37\45\1\0\123\45\45\0\11\45\2\0\147\45\2\0\4\45"
            + "\1\0\36\45\2\0\2\45\105\0\61\45\30\0\64\45\14\0\105\45"
            + "\13\0\12\45\6\0\30\45\3\0\1\45\4\0\56\45\2\0\44\45"
            + "\14\0\35\45\3\0\101\45\16\0\13\45\6\0\37\45\1\0\67\45"
            + "\11\0\16\45\2\0\12\45\6\0\27\45\3\0\111\45\30\0\3\45"
            + "\2\0\20\45\2\0\5\45\12\0\6\45\2\0\6\45\2\0\6\45"
            + "\11\0\7\45\1\0\7\45\1\0\53\45\1\0\4\45\4\0\2\45"
            + "\132\0\53\45\1\0\2\45\2\0\12\45\6\0\u2ba4\45\14\0\27\45"
            + "\4\0\61\45\u2104\0\u016e\45\2\0\152\45\46\0\7\45\14\0\5\45"
            + "\5\0\14\45\1\0\15\45\1\0\5\45\1\0\1\45\1\0\2\45"
            + "\1\0\2\45\1\0\154\45\41\0\u016b\45\22\0\100\45\2\0\66\45"
            + "\50\0\14\45\4\0\20\45\20\0\16\45\5\0\2\45\30\0\3\45"
            + "\40\0\5\45\1\0\207\45\23\0\12\45\7\0\32\45\4\0\1\45"
            + "\1\0\32\45\13\0\131\45\3\0\6\45\2\0\6\45\2\0\6\45"
            + "\2\0\3\45\43\0\14\45\1\0\32\45\1\0\23\45\1\0\2\45"
            + "\1\0\17\45\2\0\16\45\42\0\173\45\105\0\65\45\210\0\1\45"
            + "\202\0\35\45\3\0\61\45\17\0\1\45\37\0\40\45\20\0\33\45"
            + "\5\0\53\45\5\0\36\45\2\0\44\45\4\0\10\45\1\0\5\45"
            + "\52\0\236\45\2\0\12\45\126\0\50\45\10\0\64\45\234\0\u0137\45"
            + "\11\0\26\45\12\0\10\45\230\0\6\45\2\0\1\45\1\0\54\45"
            + "\1\0\2\45\3\0\1\45\2\0\27\45\12\0\27\45\11\0\37\45"
            + "\141\0\26\45\12\0\32\45\106\0\70\45\6\0\2\45\100\0\4\45"
            + "\1\0\2\45\5\0\10\45\1\0\3\45\1\0\33\45\4\0\3\45"
            + "\4\0\1\45\40\0\35\45\3\0\35\45\43\0\10\45\1\0\36\45"
            + "\31\0\66\45\12\0\26\45\12\0\23\45\15\0\22\45\156\0\111\45"
            + "\u03b7\0\107\45\37\0\12\45\17\0\74\45\25\0\31\45\7\0\12\45"
            + "\6\0\65\45\1\0\12\45\20\0\44\45\2\0\1\45\11\0\105\45"
            + "\13\0\13\45\45\0\22\45\1\0\45\45\170\0\73\45\5\0\12\45"
            + "\7\0\3\45\1\0\10\45\2\0\2\45\2\0\26\45\1\0\7\45"
            + "\1\0\2\45\1\0\5\45\2\0\11\45\2\0\2\45\2\0\3\45"
            + "\11\0\1\45\5\0\7\45\2\0\7\45\3\0\5\45\u010b\0\106\45"
            + "\1\0\1\45\10\0\12\45\246\0\66\45\2\0\11\45\77\0\101\45"
            + "\3\0\1\45\13\0\12\45\46\0\70\45\10\0\12\45\u01d6\0\112\45"
            + "\25\0\1\45\u01c0\0\71\45\u0507\0\u0399\45\147\0\157\45\u0b91\0\u042f\45"
            + "\u33d1\0\u0239\45\7\0\37\45\1\0\12\45\146\0\36\45\2\0\5\45"
            + "\13\0\67\45\11\0\4\45\14\0\12\45\11\0\25\45\5\0\23\45"
            + "\u0370\0\105\45\13\0\57\45\20\0\21\45\u4060\0\2\45\u0bfe\0\153\45"
            + "\5\0\15\45\3\0\11\45\7\0\12\45\3\0\2\45\u14c6\0\5\45"
            + "\3\0\6\45\10\0\10\45\2\0\7\45\36\0\4\45\224\0\3\45"
            + "\u01bb\0\125\45\1\0\107\45\1\0\2\45\2\0\1\45\2\0\2\45"
            + "\2\0\4\45\1\0\14\45\1\0\1\45\1\0\7\45\1\0\101\45"
            + "\1\0\4\45\2\0\10\45\1\0\7\45\1\0\34\45\1\0\4\45"
            + "\1\0\5\45\1\0\1\45\3\0\7\45\1\0\u0154\45\2\0\31\45"
            + "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\37\45\1\0\31\45"
            + "\1\0\37\45\1\0\31\45\1\0\37\45\1\0\31\45\1\0\10\45"
            + "\2\0\62\45\u1000\0\305\45\13\0\7\45\u0529\0\4\45\1\0\33\45"
            + "\1\0\2\45\1\0\1\45\2\0\1\45\1\0\12\45\1\0\4\45"
            + "\1\0\1\45\1\0\1\45\6\0\1\45\4\0\1\45\1\0\1\45"
            + "\1\0\1\45\1\0\3\45\1\0\2\45\1\0\1\45\2\0\1\45"
            + "\1\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45\1\0\2\45"
            + "\1\0\1\45\2\0\4\45\1\0\7\45\1\0\4\45\1\0\4\45"
            + "\1\0\1\45\1\0\12\45\1\0\21\45\5\0\3\45\1\0\5\45"
            + "\1\0\21\45\u0274\0\32\45\6\0\32\45\6\0\32\45\u0e76\0\ua6d7\45"
            + "\51\0\u1035\45\13\0\336\45\u3fe2\0\u021e\45\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"
            + "\360\45\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\2\1\1\2\15\1\1\3\1\4\1\5\1\6"
            + "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
            + "\1\17\1\20\1\21\1\1\1\0\1\22\1\23\12\1"
            + "\1\24\3\1\1\25\2\1\1\26\1\27\1\30\1\0"
            + "\1\31\2\0\1\32\15\1\1\33\4\1\2\0\1\34"
            + "\1\1\1\35\1\36\1\37\4\1\1\40\7\1\1\41"
            + "\16\1\1\42\1\1\1\43\1\44\1\45\3\1\1\46"
            + "\1\1\1\47\1\1\1\50\12\1\1\51\2\1\1\52"
            + "\1\53\1\54\1\55\1\56\2\1\1\57\4\1\1\60"
            + "\1\1\1\61\1\62";

    private static int[] zzUnpackAction() {
        int[] result = new int[155];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\53\0\126\0\201\0\201\0\254\0\327\0\u0102"
            + "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"
            + "\0\u0285\0\u02b0\0\u02db\0\u0306\0\201\0\u0331\0\u035c\0\u0331"
            + "\0\u0331\0\u0331\0\u0331\0\u0331\0\u0331\0\u0331\0\u0331\0\u0331"
            + "\0\u0387\0\u03b2\0\u0331\0\u0331\0\u03dd\0\u0408\0\u0433\0\u045e"
            + "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\201\0\u058b"
            + "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u0331\0\u0331\0\u0331"
            + "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u03b2\0\u0739\0\u0764\0\u078f"
            + "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7"
            + "\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f"
            + "\0\u0a6a\0\u06e3\0\u0a95\0\201\0\201\0\201\0\u0ac0\0\u0aeb"
            + "\0\u0b16\0\u0b41\0\201\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"
            + "\0\u0c43\0\u0c6e\0\201\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"
            + "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"
            + "\0\u0ec8\0\201\0\u0ef3\0\201\0\201\0\201\0\u0f1e\0\u0f49"
            + "\0\u0f74\0\201\0\u0f9f\0\201\0\u0fca\0\201\0\u0ff5\0\u1020"
            + "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178"
            + "\0\201\0\u11a3\0\u11ce\0\201\0\u11f9\0\201\0\201\0\201"
            + "\0\u1224\0\u124f\0\201\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\201"
            + "\0\u1326\0\201\0\201";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[155];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\0\1\2\1\3\1\4\2\5\1\6\1\7\1\10"
            + "\1\11\1\12\1\13\1\14\1\5\1\15\1\16\1\17"
            + "\1\20\1\5\1\21\1\5\1\22\1\23\1\24\1\25"
            + "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"
            + "\1\36\1\37\1\40\1\5\1\0\1\41\1\0\1\42"
            + "\1\43\1\44\1\0\1\5\1\45\2\5\1\46\17\5"
            + "\3\0\1\5\13\0\3\5\5\0\12\5\1\47\11\5"
            + "\3\0\1\5\13\0\3\5\5\0\24\5\3\0\1\5"
            + "\13\0\3\5\5\0\7\5\1\50\14\5\3\0\1\5"
            + "\13\0\3\5\5\0\4\5\1\51\17\5\3\0\1\5"
            + "\13\0\3\5\5\0\13\5\1\52\10\5\3\0\1\5"
            + "\13\0\3\5\5\0\2\5\1\53\21\5\3\0\1\5"
            + "\13\0\3\5\5\0\12\5\1\54\11\5\3\0\1\5"
            + "\13\0\3\5\5\0\13\5\1\55\4\5\1\56\3\5"
            + "\3\0\1\5\13\0\3\5\5\0\2\5\1\57\21\5"
            + "\3\0\1\5\13\0\3\5\5\0\4\5\1\60\17\5"
            + "\3\0\1\5\13\0\3\5\5\0\12\5\1\61\11\5"
            + "\3\0\1\5\13\0\3\5\5\0\7\5\1\62\14\5"
            + "\3\0\1\5\13\0\3\5\5\0\7\5\1\63\2\5"
            + "\1\64\11\5\3\0\1\5\13\0\3\5\5\0\4\5"
            + "\1\65\17\5\3\0\1\5\13\0\3\5\33\0\1\66"
            + "\52\0\1\67\52\0\1\70\130\0\1\71\13\0\1\72"
            + "\5\0\24\5\3\0\1\5\1\0\1\71\11\0\2\5"
            + "\1\41\1\73\3\0\1\42\24\74\3\42\1\74\13\42"
            + "\1\74\1\0\1\74\1\42\1\75\2\42\1\0\2\5"
            + "\1\76\21\5\3\0\1\5\13\0\3\5\5\0\1\5"
            + "\1\77\16\5\1\100\3\5\3\0\1\5\13\0\3\5"
            + "\5\0\4\5\1\101\17\5\3\0\1\5\13\0\3\5"
            + "\5\0\12\5\1\102\11\5\3\0\1\5\13\0\3\5"
            + "\5\0\1\5\1\103\22\5\3\0\1\5\13\0\3\5"
            + "\5\0\7\5\1\104\14\5\3\0\1\5\13\0\3\5"
            + "\5\0\2\5\1\105\21\5\3\0\1\5\13\0\3\5"
            + "\5\0\12\5\1\106\11\5\3\0\1\5\13\0\3\5"
            + "\5\0\14\5\1\107\7\5\3\0\1\5\13\0\3\5"
            + "\5\0\15\5\1\110\6\5\3\0\1\5\13\0\3\5"
            + "\5\0\16\5\1\111\5\5\3\0\1\5\13\0\3\5"
            + "\5\0\2\5\1\112\21\5\3\0\1\5\13\0\3\5"
            + "\5\0\13\5\1\113\10\5\3\0\1\5\13\0\3\5"
            + "\5\0\13\5\1\114\10\5\3\0\1\5\13\0\3\5"
            + "\5\0\3\5\1\115\20\5\3\0\1\5\13\0\3\5"
            + "\5\0\15\5\1\116\2\5\1\117\3\5\3\0\1\5"
            + "\13\0\3\5\52\0\1\120\36\0\1\71\13\0\1\72"
            + "\1\73\35\0\1\121\13\0\1\122\4\0\1\42\24\74"
            + "\3\42\1\74\13\42\3\74\1\42\1\75\2\42\1\0"
            + "\3\5\1\123\20\5\3\0\1\5\13\0\3\5\5\0"
            + "\4\5\1\124\17\5\3\0\1\5\13\0\3\5\5\0"
            + "\2\5\1\125\21\5\3\0\1\5\13\0\3\5\5\0"
            + "\11\5\1\126\12\5\3\0\1\5\13\0\3\5\5\0"
            + "\13\5\1\127\10\5\3\0\1\5\13\0\3\5\5\0"
            + "\7\5\1\130\14\5\3\0\1\5\13\0\3\5\5\0"
            + "\15\5\1\131\6\5\3\0\1\5\13\0\3\5\5\0"
            + "\11\5\1\132\12\5\3\0\1\5\13\0\3\5\5\0"
            + "\1\5\1\133\22\5\3\0\1\5\13\0\3\5\5\0"
            + "\12\5\1\134\11\5\3\0\1\5\13\0\3\5\5\0"
            + "\1\5\1\135\22\5\3\0\1\5\13\0\3\5\5\0"
            + "\12\5\1\136\11\5\3\0\1\5\13\0\3\5\5\0"
            + "\14\5\1\137\7\5\3\0\1\5\13\0\3\5\5\0"
            + "\1\140\4\5\1\141\12\5\1\142\3\5\3\0\1\5"
            + "\13\0\3\5\5\0\2\5\1\143\21\5\3\0\1\5"
            + "\13\0\3\5\5\0\21\5\1\144\2\5\3\0\1\5"
            + "\13\0\3\5\5\0\12\5\1\145\11\5\3\0\1\5"
            + "\13\0\3\5\5\0\14\5\1\146\7\5\3\0\1\5"
            + "\13\0\3\5\36\0\1\71\13\0\1\120\1\73\51\0"
            + "\1\122\5\0\1\5\1\147\22\5\3\0\1\5\13\0"
            + "\3\5\5\0\14\5\1\150\7\5\3\0\1\5\13\0"
            + "\3\5\5\0\4\5\1\151\17\5\3\0\1\5\13\0"
            + "\3\5\5\0\7\5\1\152\14\5\3\0\1\5\13\0"
            + "\3\5\5\0\12\5\1\153\11\5\3\0\1\5\13\0"
            + "\3\5\5\0\1\5\1\154\22\5\3\0\1\5\13\0"
            + "\3\5\5\0\7\5\1\155\14\5\3\0\1\5\13\0"
            + "\3\5\5\0\13\5\1\156\10\5\3\0\1\5\13\0"
            + "\3\5\5\0\1\5\1\157\22\5\3\0\1\5\13\0"
            + "\3\5\5\0\4\5\1\160\17\5\3\0\1\5\13\0"
            + "\3\5\5\0\7\5\1\161\14\5\3\0\1\5\13\0"
            + "\3\5\5\0\7\5\1\162\2\5\1\163\11\5\3\0"
            + "\1\5\13\0\3\5\5\0\13\5\1\164\10\5\3\0"
            + "\1\5\13\0\3\5\5\0\1\5\1\165\22\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\166\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\167\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\1\5\1\170\22\5\3\0"
            + "\1\5\13\0\3\5\5\0\10\5\1\171\13\5\3\0"
            + "\1\5\13\0\3\5\5\0\2\5\1\172\21\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\173\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\2\5\1\174\21\5\3\0"
            + "\1\5\13\0\3\5\5\0\10\5\1\175\13\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\176\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\2\5\1\177\21\5\3\0"
            + "\1\5\13\0\3\5\5\0\1\5\1\200\22\5\3\0"
            + "\1\5\13\0\3\5\5\0\12\5\1\201\11\5\3\0"
            + "\1\5\13\0\3\5\5\0\3\5\1\202\20\5\3\0"
            + "\1\5\13\0\3\5\5\0\5\5\1\203\16\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\204\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\11\5\1\205\12\5\3\0"
            + "\1\5\13\0\3\5\5\0\13\5\1\206\10\5\3\0"
            + "\1\5\13\0\3\5\5\0\7\5\1\207\14\5\3\0"
            + "\1\5\13\0\3\5\5\0\5\5\1\210\16\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\211\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\13\5\1\212\10\5\3\0"
            + "\1\5\13\0\3\5\5\0\21\5\1\213\2\5\3\0"
            + "\1\5\13\0\3\5\5\0\4\5\1\214\17\5\3\0"
            + "\1\5\13\0\3\5\5\0\20\5\1\215\3\5\3\0"
            + "\1\5\13\0\3\5\5\0\12\5\1\216\11\5\3\0"
            + "\1\5\13\0\3\5\5\0\2\5\1\217\21\5\3\0"
            + "\1\5\13\0\3\5\5\0\1\5\1\220\22\5\3\0"
            + "\1\5\13\0\3\5\5\0\2\5\1\221\21\5\3\0"
            + "\1\5\13\0\3\5\5\0\14\5\1\222\7\5\3\0"
            + "\1\5\13\0\3\5\5\0\13\5\1\223\10\5\3\0"
            + "\1\5\13\0\3\5\5\0\23\5\1\224\3\0\1\5"
            + "\13\0\3\5\5\0\16\5\1\225\5\5\3\0\1\5"
            + "\13\0\3\5\5\0\1\5\1\226\22\5\3\0\1\5"
            + "\13\0\3\5\5\0\21\5\1\227\2\5\3\0\1\5"
            + "\13\0\3\5\5\0\2\5\1\230\21\5\3\0\1\5"
            + "\13\0\3\5\5\0\4\5\1\231\17\5\3\0\1\5"
            + "\13\0\3\5\5\0\12\5\1\232\11\5\3\0\1\5"
            + "\13\0\3\5\5\0\20\5\1\233\3\5\3\0\1\5"
            + "\13\0\3\5\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4945];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\24\1\1\11\1\1\11\11\1\1\1\0\2\11"
            + "\21\1\3\11\1\0\1\1\2\0\23\1\2\0\112\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[155];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    private int contador;
    private ArrayList<CToken> tokens;

    private void writeOutputFile() throws IOException {
        String filename = "file.out";
        BufferedWriter out = new BufferedWriter(
                new FileWriter(filename));
        System.out.println("\n*** Tokens guardados en archivo ***\n");
        for (CToken t : this.tokens) {
            System.out.println(t);
            out.write(t + "\n");
        }
        out.close();
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public CScaneador(java.io.Reader in) {
        contador = 0;
        tokens = new ArrayList<CToken>();
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 2644) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;
            try {
                this.writeOutputFile();

            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public CToken nextToken() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "ID_VAR", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 51:
                        break;
                    case 2: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OL_O", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 52:
                        break;
                    case 3: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OR_MAYOR_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 53:
                        break;
                    case 4: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OR_MENOR_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 54:
                        break;
                    case 5: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_ASIGNACION", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 55:
                        break;
                    case 6: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "y", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 56:
                        break;
                    case 7: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OA_SUMA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 57:
                        break;
                    case 8: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OA_RESTA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 58:
                        break;
                    case 9: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OA_PRODUCTO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 59:
                        break;
                    case 10: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OA_DIVISION", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 60:
                        break;
                    case 11: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OA_MODULO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 61:
                        break;
                    case 12: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_DOS_PUNTOS", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 62:
                        break;
                    case 13: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_PAREN_ABRE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 63:
                        break;
                    case 14: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_PAREN_CIERRA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 64:
                        break;
                    case 15: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_CORCHETE_ABRE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 65:
                        break;
                    case 16: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_CORCHETE_CIERRA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 66:
                        break;
                    case 17: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "O_COMA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 67:
                        break;
                    case 18: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "VALOR_ESPACIO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 68:
                        break;
                    case 19: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "VALOR_FIN_LINEA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 69:
                        break;
                    case 20: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OL_NO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 70:
                        break;
                    case 21: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_SI", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 71:
                        break;
                    case 22: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OR_MAYOR_O_IGUAL_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 72:
                        break;
                    case 23: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OR_MENOR_O_IGUAL_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 73:
                        break;
                    case 24: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "OR_IGUAL_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 74:
                        break;
                    case 25: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "VALOR_ENTERO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 75:
                        break;
                    case 26: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "VALOR_CADENA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 76:
                        break;
                    case 27: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_FIN", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 77:
                        break;
                    case 28: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "VALOR_REAL", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 78:
                        break;
                    case 29: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_PARA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 79:
                        break;
                    case 30: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_PASO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 80:
                        break;
                    case 31: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_REAL", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 81:
                        break;
                    case 32: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_LEER", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 82:
                        break;
                    case 33: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_SINO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 83:
                        break;
                    case 34: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_FIN_SI", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 84:
                        break;
                    case 35: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_SEGUN", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 85:
                        break;
                    case 36: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_HACER", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 86:
                        break;
                    case 37: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_HASTA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 87:
                        break;
                    case 38: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_INICIO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 88:
                        break;
                    case 39: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_ENTERO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 89:
                        break;
                    case 40: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_CADENA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 90:
                        break;
                    case 41: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_FIN_PARA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 91:
                        break;
                    case 42: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_PROGRAMA", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 92:
                        break;
                    case 43: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_MIENTRAS", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 93:
                        break;
                    case 44: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_VARIABLE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 94:
                        break;
                    case 45: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_BOOLEANO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 95:
                        break;
                    case 46: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_ESCRIBIR", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 96:
                        break;
                    case 47: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_FIN_SEGUN", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 97:
                        break;
                    case 48: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_DE_OTRO_MODO", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 98:
                        break;
                    case 49: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_MIENTRAS_QUE", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 99:
                        break;
                    case 50: {
                        contador++;
                        CToken t = new CToken(contador, yytext(), "PR_FIN_MIENTRAS", yyline, yycolumn);
                        tokens.add(t);
                        return t;
                    }
                    case 100:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
