/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amateurcompiler.vista;

import amateurcompiler.logica.*;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author jdpra
 */
public class FVistaCpp extends javax.swing.JFrame {

    /**
     * Creates new form FPrincipal
     */
    
    public FVistaCpp() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FVistaCpp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
        
        
        
        jTextAreaCodigoCpp.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
                try {
                    int row = jTextAreaCodigoCpp.getLineOfOffset(pos) + 1;
                    int col = pos - jTextAreaCodigoCpp.getLineStartOffset(row - 1) + 1;
                    jLabelLineas.setText("Línea: " + row + " Columna: " + col);
                    
                } catch (BadLocationException exc) {
                    System.out.println(exc);
                }
            }
        });
    }
    
    public FVistaCpp(CConvertidor c) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FVistaCpp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
        
        jTextAreaCodigoCpp.setText(c.Convertir());
        
        jTextAreaCodigoCpp.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
                try {
                    int row = jTextAreaCodigoCpp.getLineOfOffset(pos) + 1;
                    int col = pos - jTextAreaCodigoCpp.getLineStartOffset(row - 1) + 1;
                    jLabelLineas.setText("Línea: " + row + " Columna: " + col);
                    
                } catch (BadLocationException exc) {
                    System.out.println(exc);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelCondigoCpp = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaCodigoCpp = new javax.swing.JTextArea();
        jLabelLineas = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(960, 600));
        setSize(new java.awt.Dimension(900, 600));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 600));

        jPanelCondigoCpp.setBackground(new java.awt.Color(255, 255, 255));
        jPanelCondigoCpp.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultado"));
        jPanelCondigoCpp.setPreferredSize(new java.awt.Dimension(420, 490));

        jTextAreaCodigoCpp.setBackground(new java.awt.Color(238, 238, 243));
        jTextAreaCodigoCpp.setColumns(20);
        jTextAreaCodigoCpp.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTextAreaCodigoCpp.setForeground(new java.awt.Color(0, 65, 244));
        jTextAreaCodigoCpp.setRows(5);
        jScrollPane4.setViewportView(jTextAreaCodigoCpp);

        javax.swing.GroupLayout jPanelCondigoCppLayout = new javax.swing.GroupLayout(jPanelCondigoCpp);
        jPanelCondigoCpp.setLayout(jPanelCondigoCppLayout);
        jPanelCondigoCppLayout.setHorizontalGroup(
            jPanelCondigoCppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
        );
        jPanelCondigoCppLayout.setVerticalGroup(
            jPanelCondigoCppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );

        jLabelLineas.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCondigoCpp, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabelLineas, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanelCondigoCpp, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabelLineas)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void pasoDeTexto() {
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            
            String path = FVistaCpp.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            path = path.substring(0, path.lastIndexOf('/') + 1);

            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine())
            path = path + "amateurcompiler/temp/out.txt";
            amateurcompiler.CCliente.path = path;
//            JOptionPane.showMessageDialog(null, path);
            try (
                    //fichero = new FileWriter(ruta);
                    //pw = new PrintWriter(fichero);
                    BufferedWriter bw = new BufferedWriter(
                            new OutputStreamWriter(new FileOutputStream(new File(path)), "utf-8")
                    )) {
                bw.write(jTextAreaCodigoCpp.getText());
            }
            
        } catch (URISyntaxException | IOException e) {
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
            }
        }
        
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        ArrayList<String> lineas = new ArrayList<>();

        // TODO add your handling code here:
        //Create a file chooser
        try {
            
            String path = FVistaCpp.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            path = path.substring(0, path.lastIndexOf('/') + 1);
            archivo = new File(path + "/amateurcompiler/temp/out.txt");
            
            fr = new FileReader(archivo);
            //br = new BufferedReader(fr);

            br = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(archivo), "utf-8"));

            // Lectura del fichero
            String linea;
            
            while ((linea = br.readLine()) != null) {
                
                System.out.println(linea);
                lineas.add(linea + "\n");
                //System.out.println(linea);
            }
        } catch (HeadlessException | IOException e) {
            
        } catch (URISyntaxException ex) {
            Logger.getLogger(FVistaCpp.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // En el finally cerramos el fichero, para asegurarnos
            // que se cierra tanto si todo va bien como si salta 
            // una excepcion.

            try {
                
                if (null != fr) {
                    
                    fr.close();
                    
                }
            } catch (Exception e2) {
            }
        }
        
        for (int i = 0; i < lineas.size(); i++) {
            //jTextAreaLog.setText(jTextAreaLog.getText() + lineas.get(i));
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FVistaCpp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelLineas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCondigoCpp;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextAreaCodigoCpp;
    // End of variables declaration//GEN-END:variables
}
